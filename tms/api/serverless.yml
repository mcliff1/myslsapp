service: tms

frameworkVersion: ">=1.1.0 < 2.0.0"
#plugins:
#  - serverless-domain-manager


# used for readability
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  extra: ${file(serverless-${self:custom.stage}.json)}
  basestackname: tmsbase

  domainname: ${ssm:/${self:custom.basestackname}/domainName}
  hostname: ${ssm:/${self:custom.basestackname}/apiHostName}
  acmarn: ${ssm:/${self:custom.basestackname}/apiAcmArn}

  #customDomain:
  #    domainName: tms-${self:custom.stage}-api.${self:custom.domainname}
  #    certificateName: tms-${self:custom.stage}-api.${self:custom.domainname}
  #    createRoute53Record: attribute
  #    endpointType: regional


provider:
  name: aws
  runtime: python3.6

  environment:
    STAGE: ${self:custom.stage}
    DYNAMODB_TABLE: {Ref: MainDB}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        "Fn::Join":
          - ""
          -
            - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: MainDB
            - "*"


functions:
  mainapi:
    handler: resthandler.handle
    tags:
      created: serverless for Customer REST API
      Name: REST Customer  Lambda Function

    events:
      - http:
          path: /{ObjectType}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
            allowCredentials: false

      - http:
          path: /{ObjectType}
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
            allowCredentials: false
      - http:
          path: /{ObjectType}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
            allowCredentials: false
      - http:
          path: /{ObjectType}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
            allowCredentials: false


resources:
  Resources:
    MainDB:
      Type: 'AWS::DynamoDB::Table'
      #DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: ObjectType
            AttributeType: S
          - AttributeName: Id
            AttributeType: S
        KeySchema:
          - AttributeName: ObjectType
            KeyType: HASH
          - AttributeName: Id
            KeyType: RANGE
        Tags:
          - Key: "Created"
            Value: "part of TMS API SLS stack"
          - Key: "Name"
            Value: "TMS Main Serverless DB"
        #ProvisionedThroughput: ${self:custom.extra.DynamoCapacity}
        ProvisionedThroughput: { "ReadCapacityUnits": "1", "WriteCapacityUnits": "1"}

    ApiGatewayDomain:
      Type: 'AWS::ApiGateway::DomainName'
      Properties:
        DomainName: ${self:custom.hostname}.${self:custom.domainname}
        CertificateArn: ${self:custom.acmarn}

    ApiGatewayMapping:
      Type: 'AWS::ApiGateway::BasePathMapping'
      DependsOn: ApiGatewayDomain
      Properties:
        DomainName: { "Ref" : ApiGatewayDomain }
        RestApiId: { "Ref" : ApiGatewayRestApi }

    ApiGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      DependsOn: ApiGatewayDomain
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: { "Ref" : ApiGatewayRestApi }

    MyDNSRecord:
      Type: 'AWS::Route53::RecordSetGroup'
      DependsOn: ApiGatewayDomain
      Properties:
        HostedZoneName: { "Fn::Sub" : "${self:custom.domainname}." }
        RecordSets:
          - Type: A
            Name: ${self:custom.hostname}.${self:custom.domainname}
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2   # hardcoded for all cloudfront
              DNSName: { "Fn::GetAtt" : ApiGatewayDomain.DistributionDomainName }

  Outputs:
    ExportServiceEndpoint:
      Description: "URL Endpoint for the REST Service"
      Value:
        "Fn::Join":
          - ""
          -
            - "https://"
            - Ref: "ApiGatewayRestApi"
            - ".execute-api."
            - Ref: "AWS::Region"
            - ".amazonaws.com/"
            - ${self:custom.stage}
      Export:
        Name: TMSCustomerServiceEndpoint
